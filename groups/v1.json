{
  "definitions": {
    "Roblox.Groups.Api.ChangeOwnerRequest": {
      "description": "A request model for changing the group owner.",
      "properties": {
        "userId": {
          "description": "The user id.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.CreateWallPostRequest": {
      "description": "A request model for creating a group wall post",
      "properties": {
        "body": {
          "description": "The wall post body",
          "type": "string"
        },
        "captchaId": {
          "type": "string"
        },
        "captchaProvider": {
          "type": "string"
        },
        "captchaToken": {
          "type": "string"
        },
        "challengeId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupAllRolesResponse": {
      "description": "A group roles response model",
      "properties": {
        "groupId": {
          "description": "The group id",
          "format": "int64",
          "type": "integer"
        },
        "roles": {
          "description": "The roles in the group",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupRoleResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupAuditLogPageResponse[Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem]": {
      "description": "ApiPageResponse for group audit log",
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem"
          },
          "type": "array"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "previousPageCursor": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupConfigurationDisplayOptionsResponse": {
      "description": "A response model for group configuration",
      "properties": {
        "groupConfiguration": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupConfigurationResponse"
        },
        "groupNameChangeConfiguration": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupNameChangeConfigurationResponse"
        },
        "isDefaultEmblemPolicyEnabled": {
          "description": "If set to true, default group emblem policies handled by GUAC will be enabled\r\n            \r\nIf set to false, default group emblem policies will not be enabled",
          "type": "boolean"
        },
        "isPremiumPayoutsEnabled": {
          "description": "The configuration of premium payouts shows in Group Revenue Summary page",
          "type": "boolean"
        },
        "recurringPayoutsConfiguration": {
          "$ref": "#/definitions/Roblox.Groups.Api.RecurringPayoutsConfigurationResponse"
        },
        "roleConfiguration": {
          "$ref": "#/definitions/Roblox.Groups.Api.RoleConfigurationResponse"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupConfigurationResponse": {
      "description": "A response model for group configuration",
      "properties": {
        "cost": {
          "description": "The cost of purchasing a group",
          "format": "int64",
          "type": "integer"
        },
        "descriptionMaxLength": {
          "description": "The maximum length of a group description",
          "format": "int32",
          "type": "integer"
        },
        "iconMaxFileSizeMb": {
          "description": "The maximum file size of the group icon in megabytes",
          "format": "int32",
          "type": "integer"
        },
        "isUsingTwoStepWebviewComponent": {
          "description": "Should the frontend use the 2sv webview component (as opposed to the built-in 2sv pop up)",
          "type": "boolean"
        },
        "nameMaxLength": {
          "description": "The maximum length of a group name",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupDescriptionResponse": {
      "properties": {
        "newDescription": {
          "description": "The new description returned",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupDetailResponse": {
      "description": "A detailed group response model",
      "properties": {
        "description": {
          "description": "The group description",
          "type": "string"
        },
        "hasVerifiedBadge": {
          "description": "Whether the group has a verified badge.",
          "type": "boolean"
        },
        "id": {
          "description": "The group id",
          "format": "int64",
          "type": "integer"
        },
        "isBuildersClubOnly": {
          "description": "Whether the group is Builders Club only",
          "type": "boolean"
        },
        "isLocked": {
          "description": "Whether the group is locked",
          "type": "boolean"
        },
        "memberCount": {
          "description": "The number of members in the group",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "The group name",
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel"
        },
        "publicEntryAllowed": {
          "description": "Whether the group is public (no approval required)",
          "type": "boolean"
        },
        "shout": {
          "$ref": "#/definitions/Roblox.Groups.Api.ShoutResponse"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupEconomyPermissionsModel": {
      "description": "A model representing data about an Roblox.Platform.Membership.IUser",
      "properties": {
        "addGroupPlaces": {
          "description": "Add group places permission",
          "type": "boolean"
        },
        "advertiseGroup": {
          "description": "Advertise group permission",
          "type": "boolean"
        },
        "createItems": {
          "description": "Create items permission",
          "type": "boolean"
        },
        "manageGroupGames": {
          "description": "Manage group games permission",
          "type": "boolean"
        },
        "manageItems": {
          "description": "Manage items permission",
          "type": "boolean"
        },
        "spendGroupFunds": {
          "description": "Spend group funds permission",
          "type": "boolean"
        },
        "viewAnalytics": {
          "description": "Permission to view universe analytics from the creator dashboard.",
          "type": "boolean"
        },
        "viewGroupPayouts": {
          "description": "Manage group games permission",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupJoinRequestResponse": {
      "description": "Response model for !:GroupJoinRequests",
      "properties": {
        "created": {
          "description": "The DateTime the request was created",
          "format": "date-time",
          "type": "string"
        },
        "requester": {
          "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupManagementPermissionsModel": {
      "description": "A model representing data about an Roblox.Platform.Membership.IUser",
      "properties": {
        "manageClan": {
          "description": "Manage clan permission",
          "type": "boolean"
        },
        "manageRelationships": {
          "description": "Manage group relationships permission",
          "type": "boolean"
        },
        "viewAuditLogs": {
          "description": "View audit logs permission",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupMembershipDetailResponse": {
      "description": "A group membership response model",
      "properties": {
        "group": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupDetailResponse"
        },
        "isNotificationsEnabled": {
          "description": "Whether the group notification preferences are enabled for the user",
          "type": "boolean"
        },
        "isPrimaryGroup": {
          "description": "Whether the group is the user's Primary Group",
          "type": "boolean"
        },
        "role": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupRoleResponse"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupMembershipMetadataResponse": {
      "description": "A user's group membership metadata response model",
      "properties": {
        "areEnemiesAllowed": {
          "description": "Whether enemies are allowed",
          "type": "boolean"
        },
        "areGroupFundsVisible": {
          "description": "Whether group funds are visible",
          "type": "boolean"
        },
        "areGroupGamesVisible": {
          "description": "Whether group games are visible",
          "type": "boolean"
        },
        "canConfigure": {
          "description": "If the user can configure the group",
          "type": "boolean"
        },
        "groupId": {
          "description": "The group id",
          "format": "int64",
          "type": "integer"
        },
        "isBannedFromGroup": {
          "description": "Whether the user is banned from the group",
          "type": "boolean"
        },
        "isNotificationsEnabled": {
          "description": "Whether the group's notification preferences set to enabled for the user",
          "type": "boolean"
        },
        "isPendingJoin": {
          "description": "Whether there has been a request to join this group",
          "type": "boolean"
        },
        "isPrimary": {
          "description": "Whether the group is primary",
          "type": "boolean"
        },
        "permissions": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupPermissionsModel"
        },
        "userRole": {
          "$ref": "#/definitions/Roblox.Groups.Api.UserGroupRoleResponse"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupMembershipPermissionsModel": {
      "description": "A model representing data about an Roblox.Platform.Membership.IUser",
      "properties": {
        "banMembers": {
          "description": "Ban from group permission",
          "type": "boolean"
        },
        "changeRank": {
          "description": "View wall permission",
          "type": "boolean"
        },
        "inviteMembers": {
          "description": "Post to wall permission",
          "type": "boolean"
        },
        "removeMembers": {
          "description": "Remove from group permission",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupNameChangeConfigurationResponse": {
      "properties": {
        "cooldownInDays": {
          "description": "The cooldown for group name changes in days",
          "format": "int32",
          "type": "integer"
        },
        "cost": {
          "description": "The cost of renaming a group",
          "format": "int64",
          "type": "integer"
        },
        "ownershipCooldownInDays": {
          "description": "The ownership cooldown for group name changes in days",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupOpenCloudPermissionsModel": {
      "properties": {
        "administerCloudAuthentication": {
          "description": "Permission to administer all of the group's API keys.",
          "type": "boolean"
        },
        "useCloudAuthentication": {
          "description": "Permission to create and use API keys on the group's resources.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupPayoutResponse": {
      "description": "A group payout response",
      "properties": {
        "percentage": {
          "description": "The group payout percentage for the user",
          "format": "int32",
          "type": "integer"
        },
        "user": {
          "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupPayoutRestrictionResponse": {
      "description": "Response model for Group Payout Restriction",
      "properties": {
        "canUseOneTimePayout": {
          "description": "Whether the group can use one-time payout feature.",
          "type": "boolean"
        },
        "canUseRecurringPayout": {
          "description": "Whether the group can use recurring payout feature.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupPermissionsModel": {
      "description": "A model for group permissions.",
      "properties": {
        "groupEconomyPermissions": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupEconomyPermissionsModel"
        },
        "groupManagementPermissions": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupManagementPermissionsModel"
        },
        "groupMembershipPermissions": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupMembershipPermissionsModel"
        },
        "groupOpenCloudPermissions": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupOpenCloudPermissionsModel"
        },
        "groupPostsPermissions": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupPostsPermissionsModel"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupPermissionsResponse": {
      "description": "A group role's permissions response model",
      "properties": {
        "groupId": {
          "description": "The group id",
          "format": "int64",
          "type": "integer"
        },
        "permissions": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupPermissionsModel"
        },
        "role": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupRoleResponse"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupPoliciesResponse": {
      "properties": {
        "groups": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupPolicyResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupPolicyRequest": {
      "properties": {
        "groupIds": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupPolicyResponse": {
      "properties": {
        "canViewGroup": {
          "type": "boolean"
        },
        "groupId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupPostsPermissionsModel": {
      "description": "A model representing group posts permissions",
      "properties": {
        "deleteFromWall": {
          "description": "Delete from wall permission",
          "type": "boolean"
        },
        "postToStatus": {
          "description": "Post to status permission",
          "type": "boolean"
        },
        "postToWall": {
          "description": "Post to wall permission",
          "type": "boolean"
        },
        "viewStatus": {
          "description": "View status permission",
          "type": "boolean"
        },
        "viewWall": {
          "description": "View wall permission",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupRelationshipsResponse": {
      "description": "A group relationships response model",
      "properties": {
        "groupId": {
          "description": "The group id",
          "format": "int64",
          "type": "integer"
        },
        "nextRowIndex": {
          "description": "The index for the next page of related groups",
          "format": "int64",
          "type": "integer"
        },
        "relatedGroups": {
          "description": "The related or requested groups",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupDetailResponse"
          },
          "type": "array"
        },
        "relationshipType": {
          "description": "The group relationship type ['Allies' = 1, 'Enemies' = 2]",
          "enum": [
            1,
            2
          ],
          "format": "int32",
          "type": "integer"
        },
        "totalGroupCount": {
          "description": "The total number of groups for this relationship type",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupRoleDetailResponse": {
      "properties": {
        "description": {
          "description": "The role description",
          "type": "string"
        },
        "groupId": {
          "description": "The id of the group the role belongs to",
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "description": "The role id",
          "format": "int64",
          "type": "integer"
        },
        "memberCount": {
          "description": "The number of members in the role.",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "The role name",
          "type": "string"
        },
        "rank": {
          "description": "The role rank",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupRoleResponse": {
      "description": "A group role response model",
      "properties": {
        "description": {
          "description": "The role description",
          "type": "string"
        },
        "id": {
          "description": "The role id",
          "format": "int64",
          "type": "integer"
        },
        "memberCount": {
          "description": "The number of members in the role.",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "The role name",
          "type": "string"
        },
        "rank": {
          "description": "The role rank",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupSearchMetadataResponse": {
      "description": "Response Model For Group Search Metadata Endpoint",
      "properties": {
        "ShowFriendsGroupsSort": {
          "description": "Whether or not the Friends' Groups sort should show for the authenticated user",
          "type": "boolean"
        },
        "SuggestedGroupKeywords": {
          "description": "Suggested Group Category translation keys",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupSearchPageResponse": {
      "description": "ApiPageResponse for catalog search",
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupSearchResponseItem"
          },
          "type": "array"
        },
        "keyword": {
          "description": "Keyword used for search query",
          "type": "string"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "previousPageCursor": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupSearchResponseItem": {
      "description": "A group search response",
      "properties": {
        "created": {
          "description": "When the group was created",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "The group description",
          "type": "string"
        },
        "hasVerifiedBadge": {
          "description": "The group's verified badge status",
          "type": "boolean"
        },
        "id": {
          "description": "The group id",
          "format": "int64",
          "type": "integer"
        },
        "memberCount": {
          "description": "The number of members in the group",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "The group name",
          "type": "string"
        },
        "previousName": {
          "type": "string"
        },
        "publicEntryAllowed": {
          "description": "When true anyone can join the group. When false manual approval\r\nis required to join the group",
          "type": "boolean"
        },
        "updated": {
          "description": "When the group was last updated",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupSettingsResponse": {
      "description": "Response model for Group Settings",
      "properties": {
        "areEnemiesAllowed": {
          "description": "Whether enemy club declarations are allowed.",
          "type": "boolean"
        },
        "areGroupFundsVisible": {
          "description": "Whether funds are publicly visible.",
          "type": "boolean"
        },
        "areGroupGamesVisible": {
          "description": "Whether games are publicly visible.",
          "type": "boolean"
        },
        "isApprovalRequired": {
          "description": "Whether public entry is allowed.",
          "type": "boolean"
        },
        "isBuildersClubRequired": {
          "description": "Whether Builder's Club is required.",
          "type": "boolean"
        },
        "isGroupNameChangeEnabled": {
          "description": "If the group name change feature is enabled for this group.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.GroupsDisplayOptionsResponse": {
      "description": "A group roles response model",
      "properties": {
        "areGroupBansEnabled": {
          "description": "Whether or not group bans are enabled",
          "type": "boolean"
        },
        "areProfileGroupsHidden": {
          "description": "If set to true, groups showcase will not show on users profiles.\r\n            \r\nIf set to false, group showcase will display on users profiles.",
          "type": "boolean"
        },
        "currentGroupCount": {
          "description": "The user's current group membership count",
          "format": "int32",
          "type": "integer"
        },
        "groupLimit": {
          "description": "The user's builders club membership group limit",
          "format": "int32",
          "type": "integer"
        },
        "groupPostMaxLength": {
          "description": "The maximum length of a group wall post",
          "format": "int32",
          "type": "integer"
        },
        "groupStatusMaxLength": {
          "description": "The maximum length of a group status",
          "format": "int32",
          "type": "integer"
        },
        "groupWallNotificationsSubscribeIntervalInMilliseconds": {
          "description": "Time in milliseconds between calls to subscribe to group wall notifications.",
          "format": "int32",
          "type": "integer"
        },
        "isGroupDetailsPolicyEnabled": {
          "description": "If set to true, group details will respect GUAC policies for group details\r\n            \r\nIf set to false, group details will not respect GUAC policies",
          "type": "boolean"
        },
        "isGroupWallNotificationsEnabled": {
          "description": "If set to true, group details will subscribe and respond to wall notifications.",
          "type": "boolean"
        },
        "showPreviousGroupNames": {
          "description": "Whether or not we should show previous names of this group",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.JoinGroupRequest": {
      "description": "A request model for joining group.",
      "properties": {
        "captchaId": {
          "type": "string"
        },
        "captchaProvider": {
          "type": "string"
        },
        "captchaToken": {
          "type": "string"
        },
        "challengeId": {
          "type": "string"
        },
        "redemptionToken": {
          "type": "string"
        },
        "sessionId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.MembersRequest": {
      "properties": {
        "UserIds": {
          "description": "The user ids being either accepted or declined",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.Models.Request.CreateRoleSetRequest": {
      "properties": {
        "description": {
          "description": "The description of the roleset.",
          "type": "string"
        },
        "name": {
          "description": "The name of the roleset.",
          "type": "string"
        },
        "rank": {
          "description": "The rank/positioning of the roleset.",
          "format": "int32",
          "type": "integer"
        },
        "usingGroupFunds": {
          "description": "Setting to use group funds or not.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.Models.Request.UpdateRoleSetRequest": {
      "properties": {
        "description": {
          "description": "The description of the roleset.",
          "type": "string"
        },
        "name": {
          "description": "The name of the roleset.",
          "type": "string"
        },
        "rank": {
          "description": "The rank/positioning of the roleset.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem": {
      "description": "A group audit log response model",
      "properties": {
        "actionType": {
          "description": "The action type",
          "type": "string"
        },
        "actor": {
          "$ref": "#/definitions/Roblox.Groups.Api.UserGroupRoleResponse"
        },
        "created": {
          "description": "Date the group action was performed",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "Information on the action performed"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.Models.Response.GroupNameHistoryResponseItem": {
      "description": "A group name history response model",
      "properties": {
        "created": {
          "description": "Date the name change was applied",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "The group name before the change",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.Models.Response.GroupWallPostModel": {
      "description": "A response model for group wall post information",
      "properties": {
        "body": {
          "description": "The group wall post body.",
          "type": "string"
        },
        "created": {
          "description": "When the group wall post was posted.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "The group wall post Id.",
          "format": "int64",
          "type": "integer"
        },
        "poster": {
          "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel"
        },
        "updated": {
          "description": "When the group wall post was last updated.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.Models.Response.UserModel": {
      "description": "A model representing data about an Roblox.Platform.Membership.IUser",
      "properties": {
        "buildersClubMembershipType": {
          "description": "The user's builders club membership type",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "format": "int32",
          "type": "integer"
        },
        "displayName": {
          "type": "string"
        },
        "hasVerifiedBadge": {
          "description": "The user's verified badge status.",
          "type": "boolean"
        },
        "userId": {
          "format": "int64",
          "type": "integer"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.PayoutRecipientRequest": {
      "description": "A request model for paying out Robux.",
      "properties": {
        "amount": {
          "description": "The amount to payout.",
          "format": "int64",
          "type": "integer"
        },
        "recipientId": {
          "description": "The recipient id.",
          "format": "int64",
          "type": "integer"
        },
        "recipientType": {
          "description": "The recipient type. ['User' = 0, 'Group' = 1]",
          "enum": [
            0,
            1
          ],
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.PayoutRequest": {
      "description": "Multi-payout request information.",
      "properties": {
        "PayoutType": {
          "description": "The Roblox.Groups.Api.PayoutType. ['FixedAmount' = 1, 'Percentage' = 2]",
          "enum": [
            1,
            2
          ],
          "format": "int32",
          "type": "integer"
        },
        "Recipients": {
          "description": "The recipients of the payouts.",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.PayoutRecipientRequest"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.PostGroupStatusRequest": {
      "description": "A request model for setting the authenticated user's primary group.",
      "properties": {
        "message": {
          "description": "The message to set the group status to.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.PrimaryGroupRequest": {
      "description": "A request model for setting the authenticated user's primary group.",
      "properties": {
        "groupId": {
          "description": "The group id.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.RecurringPayoutsConfigurationResponse": {
      "description": "A response model for recurring payout configuration",
      "properties": {
        "maxPayoutPartners": {
          "description": "The maximum number of recurring payout partners",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.RelationshipsRequest": {
      "properties": {
        "GroupIds": {
          "description": "The group ids being either accepted or declined",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.RoleConfigurationResponse": {
      "description": "A response model for role configuration",
      "properties": {
        "cost": {
          "description": "The cost of purchasing a role",
          "format": "int64",
          "type": "integer"
        },
        "descriptionMaxLength": {
          "description": "The maximum length of a role description",
          "format": "int32",
          "type": "integer"
        },
        "limit": {
          "description": "The maximum number of roles in a group",
          "format": "int32",
          "type": "integer"
        },
        "maxRank": {
          "description": "The maximum rank a role can have",
          "format": "int32",
          "type": "integer"
        },
        "minRank": {
          "description": "The minimum rank a role can have",
          "format": "int32",
          "type": "integer"
        },
        "nameMaxLength": {
          "description": "The maximum length of a role name",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.ShoutResponse": {
      "properties": {
        "body": {
          "description": "The shout's message",
          "type": "string"
        },
        "created": {
          "description": "The shout's created time",
          "format": "date-time",
          "type": "string"
        },
        "poster": {
          "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel"
        },
        "updated": {
          "description": "The shout's last updated time",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.SocialLinkRequest": {
      "description": "An update request for a social link",
      "properties": {
        "title": {
          "description": "The title of the link",
          "type": "string"
        },
        "type": {
          "description": "What type of social media this points to",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
          ],
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "description": "The url of the link",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.SocialLinkResponse": {
      "description": "A social link response from a create request",
      "properties": {
        "id": {
          "description": "The id of the social link",
          "format": "int64",
          "type": "integer"
        },
        "title": {
          "description": "The title of the link",
          "type": "string"
        },
        "type": {
          "description": "What type of social media (including Roblox Group) this points to ['Facebook' = 0, 'Twitter' = 1, 'YouTube' = 2, 'Twitch' = 3, 'GooglePlus' = 4, 'Discord' = 5, 'RobloxGroup' = 6, 'Amazon' = 7, 'Guilded' = 8]",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
          ],
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "description": "The url of the link",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.UpdateGroupDescriptionRequest": {
      "description": "A request model for setting a description for the group",
      "properties": {
        "description": {
          "description": "The group description being set.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.UpdateGroupNameRequest": {
      "description": "A request model for setting a name for the group",
      "properties": {
        "name": {
          "description": "The group name being set.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.UpdateGroupNameResponse": {
      "properties": {
        "newName": {
          "description": "The new description returned",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.UpdateGroupNotificationPreferenceRequest": {
      "description": "A request model for updating a group's notification preference.",
      "properties": {
        "notificationsEnabled": {
          "description": "Whether the user wants to receive notifications from the group.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.UpdateGroupSettingsRequest": {
      "description": "A request model for updating a group's settings.",
      "properties": {
        "areEnemiesAllowed": {
          "description": "Whether enemy club declarations are allowed.",
          "type": "boolean"
        },
        "areGroupFundsVisible": {
          "description": "Whether funds are publicly visible.",
          "type": "boolean"
        },
        "areGroupGamesVisible": {
          "description": "Whether games are publicly visible.",
          "type": "boolean"
        },
        "isApprovalRequired": {
          "description": "Whether public entry is allowed.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.UpdatePermissionsRequest": {
      "description": "A request model for updating a group's roleset's permissions.",
      "properties": {
        "permissions": {
          "description": "The permission-value pairs to be updated.",
          "properties": {
            "AddGroupPlaces": {
              "type": "boolean"
            },
            "AdministerCloudAuthentication": {
              "type": "boolean"
            },
            "AdvertiseGroup": {
              "type": "boolean"
            },
            "BanMembers": {
              "type": "boolean"
            },
            "ChangeRank": {
              "type": "boolean"
            },
            "CreateItems": {
              "type": "boolean"
            },
            "DeleteFromWall": {
              "type": "boolean"
            },
            "InviteMembers": {
              "type": "boolean"
            },
            "ManageClan": {
              "type": "boolean"
            },
            "ManageGroupGames": {
              "type": "boolean"
            },
            "ManageItems": {
              "type": "boolean"
            },
            "ManageRelationships": {
              "type": "boolean"
            },
            "PostToStatus": {
              "type": "boolean"
            },
            "PostToWall": {
              "type": "boolean"
            },
            "RemoveMembers": {
              "type": "boolean"
            },
            "SpendGroupFunds": {
              "type": "boolean"
            },
            "UseCloudAuthentication": {
              "type": "boolean"
            },
            "ViewAnalytics": {
              "type": "boolean"
            },
            "ViewAuditLogs": {
              "type": "boolean"
            },
            "ViewStatus": {
              "type": "boolean"
            },
            "ViewWall": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.UpdateUserRoleRequest": {
      "description": "A request model for setting a users role in a group.",
      "properties": {
        "roleId": {
          "description": "The role in the group the user should be put into.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.UserGroupMembershipResponse": {
      "description": "A users group membership response model",
      "properties": {
        "groups": {
          "description": "The list of group memberships",
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupMembershipDetailResponse"
          },
          "type": "array"
        },
        "user": {
          "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Api.UserGroupRoleResponse": {
      "description": "A user group role response model",
      "properties": {
        "role": {
          "$ref": "#/definitions/Roblox.Groups.Api.GroupRoleResponse"
        },
        "user": {
          "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel"
        }
      },
      "type": "object"
    },
    "Roblox.Groups.Client.GroupFeaturedContentResponse": {
      "properties": {
        "contentId": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "groupId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Paging.ExclusiveStartKeyCursor[System.String]": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "discriminator": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "pageNumber": {
          "format": "int32",
          "type": "integer"
        },
        "pagingDirection": {
          "description": " ['Forward' = 1, 'Backward' = 2]",
          "enum": [
            1,
            2
          ],
          "format": "int32",
          "type": "integer"
        },
        "sortOrder": {
          "description": " ['Asc' = 1, 'Desc' = 2]",
          "enum": [
            1,
            2
          ],
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Paging.StartIndexCursor": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "discriminator": {
          "type": "string"
        },
        "startIndex": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.Int32]": {
      "properties": {
        "Count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "PagingDirection": {
          "description": " ['Forward' = 1, 'Backward' = 2]",
          "enum": [
            1,
            2
          ],
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "SortOrder": {
          "description": " ['Asc' = 1, 'Desc' = 2]",
          "enum": [
            1,
            2
          ],
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.Int64]": {
      "properties": {
        "Count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "PagingDirection": {
          "description": " ['Forward' = 1, 'Backward' = 2]",
          "enum": [
            1,
            2
          ],
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "SortOrder": {
          "description": " ['Asc' = 1, 'Desc' = 2]",
          "enum": [
            1,
            2
          ],
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Web.Responses.Groups.GroupBasicResponse": {
      "properties": {
        "hasVerifiedBadge": {
          "type": "boolean"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "memberCount": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Web.Responses.Groups.GroupResponseV2": {
      "properties": {
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "hasVerifiedBadge": {
          "type": "boolean"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "memberCount": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/Roblox.Web.Responses.RelatedEntityTypeResponse[Roblox.Web.Responses.Groups.GroupOwnerType]"
        }
      },
      "type": "object"
    },
    "Roblox.Web.Responses.RelatedEntityTypeResponse[Roblox.Web.Responses.Groups.GroupOwnerType]": {
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "description": " ['User' = 0]",
          "enum": [
            0
          ],
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.ApiEmptyResponseModel": {
      "type": "object"
    },
    "Roblox.Web.WebAPI.ExclusiveStartRequest[System.Int32]": {
      "properties": {
        "CursorRecipe": {
          "type": "string"
        },
        "ExclusiveStartKeyInfo": {
          "$ref": "#/definitions/Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.Int32]"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.ExclusiveStartRequest[System.Int64]": {
      "properties": {
        "CursorRecipe": {
          "type": "string"
        },
        "ExclusiveStartKeyInfo": {
          "$ref": "#/definitions/Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.Int64]"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupDetailResponse]": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupDetailResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupMembershipDetailResponse]": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupMembershipDetailResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupPayoutResponse]": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupPayoutResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupPermissionsResponse]": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupPermissionsResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupRoleDetailResponse]": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupRoleDetailResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.SocialLinkResponse]": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.SocialLinkResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.UserGroupMembershipResponse]": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.UserGroupMembershipResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Web.Responses.Groups.GroupBasicResponse]": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Web.Responses.Groups.GroupBasicResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.GroupJoinRequestResponse]": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.GroupJoinRequestResponse"
          },
          "type": "array"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "previousPageCursor": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.Models.Response.GroupNameHistoryResponseItem]": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.GroupNameHistoryResponseItem"
          },
          "type": "array"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "previousPageCursor": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.Models.Response.GroupWallPostModel]": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.GroupWallPostModel"
          },
          "type": "array"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "previousPageCursor": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.Models.Response.UserModel]": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.UserModel"
          },
          "type": "array"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "previousPageCursor": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.UserGroupRoleResponse]": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/Roblox.Groups.Api.UserGroupRoleResponse"
          },
          "type": "array"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "previousPageCursor": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Roblox.Web.WebApi.FormData.IUploadedFile": {
      "properties": {
        "ContentEncoding": {
          "description": " ['None' = 0, 'GZip' = 1, 'Deflate' = 2, 'Brotli' = 4, 'All' = -1]",
          "enum": [
            0,
            1,
            2,
            4,
            -1
          ],
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "Name": {
          "readOnly": true,
          "type": "string"
        },
        "Stream": {
          "$ref": "#/definitions/System.IO.Stream"
        }
      },
      "type": "file"
    },
    "System.IO.Stream": {
      "properties": {
        "CanRead": {
          "readOnly": true,
          "type": "boolean"
        },
        "CanSeek": {
          "readOnly": true,
          "type": "boolean"
        },
        "CanTimeout": {
          "readOnly": true,
          "type": "boolean"
        },
        "CanWrite": {
          "readOnly": true,
          "type": "boolean"
        },
        "Length": {
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "Position": {
          "format": "int64",
          "type": "integer"
        },
        "ReadTimeout": {
          "format": "int32",
          "type": "integer"
        },
        "WriteTimeout": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "System.ValueTuple[Roblox.Web.WebAPI.ExclusiveStartRequest[System.Int64],Roblox.Paging.ExclusiveStartKeyCursor[System.String]]": {
      "properties": {
        "Item1": {
          "$ref": "#/definitions/Roblox.Web.WebAPI.ExclusiveStartRequest[System.Int64]"
        },
        "Item2": {
          "$ref": "#/definitions/Roblox.Paging.ExclusiveStartKeyCursor[System.String]"
        }
      },
      "type": "object"
    }
  },
  "host": "groups.roblox.com",
  "info": {
    "title": "Groups Api v1",
    "version": "v1"
  },
  "paths": {
    "/v1/featured-content/event": {
      "delete": {
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "query",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The event Id.",
            "format": "int64",
            "in": "query",
            "name": "eventId",
            "required": true,
            "type": "integer"
          }
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "FeaturedContent:DeleteGroupFeaturedEvent"
          ]
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: User is not authorized to set featured content for this group."
          }
        },
        "summary": "Deletes the featured event for a group",
        "tags": [
          "FeaturedContent"
        ]
      },
      "get": {
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "query",
            "name": "groupId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "FeaturedContent:GetGroupFeaturedEvent"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Client.GroupFeaturedContentResponse"
            }
          }
        },
        "summary": "Gets the featured event for a group",
        "tags": [
          "FeaturedContent"
        ]
      },
      "post": {
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "query",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The event Id.",
            "format": "int64",
            "in": "query",
            "name": "eventId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "FeaturedContent:CreateGroupFeaturedEvent"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Client.GroupFeaturedContentResponse"
            }
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: User is not authorized to set featured content for this group."
          }
        },
        "summary": "Sets the featured event for a group",
        "tags": [
          "FeaturedContent"
        ]
      }
    },
    "/v1/groups/configuration/metadata": {
      "get": {
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:GetGroupConfigurationDisplayOptions"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupConfigurationDisplayOptionsResponse"
            }
          }
        },
        "summary": "Gets Group configuration contextual information",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/groups/create": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "This endpoint will charge Robux for the group purchase.\r\nHttp status code 413 is thrown when the group icon file size is too large.",
        "parameters": [
          {
            "description": "The name of the group.",
            "in": "formData",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The group description.",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "description": "Whether or not the group is open for anyone to join.",
            "in": "formData",
            "name": "publicGroup",
            "type": "boolean"
          },
          {
            "description": "Whether or not the group is only open to join for builders club members.",
            "in": "formData",
            "name": "buildersClubMembersOnly",
            "type": "boolean"
          },
          {
            "in": "formData",
            "name": "Files",
            "type": "file"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:CreateGroup"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.Responses.Groups.GroupResponseV2"
            }
          },
          "400": {
            "description": "13: The name is invalid.\r\n15: The group icon is invalid.\r\n16: The group icon is missing from the request.\r\n18: The description is too long.\r\n19: The name is too long.\r\n20: The name has been taken."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n10: User must have builders club membership.\r\n11: User is in maximum number of groups.\r\n12: Insufficient Robux funds.\r\n14: The name is moderated."
          },
          "409": {
            "description": "37: The name was in use too recently."
          },
          "413": {
            "description": "0: Unknown error."
          },
          "429": {
            "description": "17: Too many requests."
          },
          "503": {
            "description": "21: Group creation is currently disabled."
          }
        },
        "summary": "Creates a new group.",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/groups/icon": {
      "patch": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "query",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "formData",
            "name": "Files",
            "type": "file"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:ChangeGroupIcon"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n16: The group icon is missing from the request.\r\n17: Too many requests.\r\n30: Invalid file type for group icon."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n23: Insufficient permissions to complete the request."
          },
          "413": {
            "description": "0: Unknown error."
          }
        },
        "summary": "Updates the group icon.",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/groups/metadata": {
      "get": {
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:GetGroupDisplayOptions"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupsDisplayOptionsResponse"
            }
          }
        },
        "summary": "Gets Groups contextual information:\r\nMax number of groups a user can be part of.\r\nCurrent number of groups a user is a member of.\r\nWhether to show/hide certain features based on device type.",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/groups/policies": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "groupPolicyRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupPolicyRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:GetGroupPolicies"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupPoliciesResponse"
            }
          },
          "400": {
            "description": "1: Too many ids in request.\r\n2: Ids could not be parsed from request."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "summary": "Gets group policy info used for compliance.",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/groups/search": {
      "get": {
        "parameters": [
          {
            "description": "The keyword or phrase to use as the search parameter.",
            "in": "query",
            "name": "keyword",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Whether or not to prioritize the exact match for the keyword (optional, defaults to false.",
            "in": "query",
            "name": "prioritizeExactMatch",
            "type": "boolean"
          },
          {
            "default": 10,
            "description": "The number of results per request.",
            "enum": [
              10,
              25,
              50,
              100
            ],
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The paging cursor for the previous or next page.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "GroupSearch:SearchGroups"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupSearchPageResponse"
            }
          },
          "400": {
            "description": "2: Search term not appropriate for Roblox.\r\n3: Search term was left empty.\r\n4: Search terms can be 2 to 50 characters long."
          }
        },
        "summary": "Search for groups by keyword.",
        "tags": [
          "GroupSearch"
        ]
      }
    },
    "/v1/groups/search/lookup": {
      "get": {
        "description": "Should only be used for direct lookups where a user is inputting a group name, shouldn't be used for search pages.",
        "parameters": [
          {
            "description": "The group name.",
            "in": "query",
            "name": "groupName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "GroupSearch:LookupGroupsByName"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Web.Responses.Groups.GroupBasicResponse]"
            }
          },
          "400": {
            "description": "1: Name is missing or has invalid characters."
          }
        },
        "summary": "Looks up groups by a name. Prioritizes an exact match as the first result.",
        "tags": [
          "GroupSearch"
        ]
      }
    },
    "/v1/groups/search/metadata": {
      "get": {
        "description": "Although there is no reason for this to require an authenticated user right now, in the future,\r\nwe will use coco to return different suggested groups based upon that user's request context",
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "GroupSearch:GetGroupSearchMetadata"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupSearchMetadataResponse"
            }
          },
          "404": {
            "description": "5: No Localized Version of group search category exists"
          }
        },
        "summary": "Get suggested groups and other miscellaneous information needed for the group/join page like flags",
        "tags": [
          "GroupSearch"
        ]
      }
    },
    "/v1/groups/{groupId}": {
      "get": {
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:GetGroup"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupDetailResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          }
        },
        "summary": "Gets group information",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/groups/{groupId}/audit-log": {
      "get": {
        "parameters": [
          {
            "description": "The id of the group the user is in.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "enum": [
              "DeletePost",
              "RemoveMember",
              "AcceptJoinRequest",
              "DeclineJoinRequest",
              "PostStatus",
              "ChangeRank",
              "BuyAd",
              "SendAllyRequest",
              "CreateEnemy",
              "AcceptAllyRequest",
              "DeclineAllyRequest",
              "DeleteAlly",
              "DeleteEnemy",
              "AddGroupPlace",
              "RemoveGroupPlace",
              "CreateItems",
              "ConfigureItems",
              "SpendGroupFunds",
              "ChangeOwner",
              "Delete",
              "AdjustCurrencyAmounts",
              "Abandon",
              "Claim",
              "Rename",
              "ChangeDescription",
              "InviteToClan",
              "KickFromClan",
              "CancelClanInvite",
              "BuyClan",
              "CreateGroupAsset",
              "UpdateGroupAsset",
              "ConfigureGroupAsset",
              "RevertGroupAsset",
              "CreateGroupDeveloperProduct",
              "ConfigureGroupGame",
              "CreateGroupDeveloperSubscriptionProduct",
              "Lock",
              "Unlock",
              "CreateGamePass",
              "CreateBadge",
              "ConfigureBadge",
              "SavePlace",
              "PublishPlace",
              "UpdateRolesetRank",
              "UpdateRolesetData",
              "BanMember",
              "UnbanMember"
            ],
            "in": "query",
            "name": "actionType",
            "type": "string"
          },
          {
            "description": "Filter for specific user id",
            "format": "int64",
            "in": "query",
            "name": "userId",
            "type": "integer"
          },
          {
            "default": 10,
            "description": "The number of results per request.",
            "enum": [
              10,
              25,
              50,
              100
            ],
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The paging cursor for the previous or next page.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "default": "Asc",
            "description": "The order the results are sorted in.",
            "enum": [
              "Asc",
              "Desc"
            ],
            "in": "query",
            "name": "sortOrder",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:GetGroupAuditLog"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupAuditLogPageResponse[Roblox.Groups.Api.Models.Response.GroupAuditLogResponseItem]"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "23: Insufficient permissions to complete the request."
          }
        },
        "summary": "Gets the Group's audit log",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/groups/{groupId}/change-owner": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The request.",
            "in": "body",
            "name": "changeOwnerRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.ChangeOwnerRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:ChangeOwner"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist.\r\n15: User is not a member of the group.\r\n16: The user does not have the necessary level of premium membership."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n17: You are not authorized to change the owner of this group.\r\n25: 2-Step Verification is required to make further transactions. Go to Settings \u003e Security to complete 2-Step Verification."
          }
        },
        "summary": "Changes the group owner to another user.",
        "tags": [
          "Membership"
        ]
      }
    },
    "/v1/groups/{groupId}/claim-ownership": {
      "post": {
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:ClaimGroupOwnership"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n11: You are not authorized to claim this group\r\n12: This group already has an owner\r\n13: Too many attempts to claim groups. Please try again later."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "summary": "Claims ownership of the group as the authenticated user",
        "tags": [
          "Membership"
        ]
      }
    },
    "/v1/groups/{groupId}/description": {
      "patch": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The id of the group the user is in.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The Roblox.Groups.Api.UpdateGroupDescriptionRequest.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.UpdateGroupDescriptionRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:UpdateGroupDescription"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupDescriptionResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n29: Your group description was empty."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n18: The description is too long.\r\n23: Insufficient permissions to complete the request."
          }
        },
        "summary": "Updates the groups description",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/groups/{groupId}/join-requests": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The Roblox.Groups.Api.MembersRequest.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.MembersRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:DeleteBatchJoinRequests"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "summary": "Batch declines group join requests",
        "tags": [
          "Membership"
        ]
      },
      "get": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "The number of results per request.",
            "enum": [
              10,
              25,
              50,
              100
            ],
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The paging cursor for the previous or next page.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "default": "Asc",
            "description": "The order the results are sorted in.",
            "enum": [
              "Asc",
              "Desc"
            ],
            "in": "query",
            "name": "sortOrder",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetGroupJoinRequestsByGroup"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.GroupJoinRequestResponse]"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "19: You have insufficient permissions for this request."
          }
        },
        "summary": "Gets a page of Group Join Requests for a group.",
        "tags": [
          "Membership"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The Roblox.Groups.Api.MembersRequest.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.MembersRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:AcceptBatchJoinRequests"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist.\r\n20: The group join request is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are already in the maximum number of groups.\r\n19: You have insufficient permissions for this request."
          },
          "500": {
            "description": "0: Something went wrong."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "summary": "Batch accepts group join requests",
        "tags": [
          "Membership"
        ]
      }
    },
    "/v1/groups/{groupId}/join-requests/users/{userId}": {
      "delete": {
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The user Id.",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:DeleteJoinRequest"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n4: You do not have permission to manage this member."
          }
        },
        "summary": "Declines/cancels a group join request.",
        "tags": [
          "Membership"
        ]
      },
      "get": {
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The user Id.",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetGroupJoinRequestByGroupAndUser"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupJoinRequestResponse"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "19: You have insufficient permissions for this request."
          }
        },
        "summary": "Gets a group join request by userId.",
        "tags": [
          "Membership"
        ]
      },
      "post": {
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The user Id.",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:AcceptJoinRequest"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist.\r\n20: The group join request is invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are already in the maximum number of groups.\r\n19: You have insufficient permissions for this request."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "summary": "Accepts a group join request.",
        "tags": [
          "Membership"
        ]
      }
    },
    "/v1/groups/{groupId}/membership": {
      "get": {
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "includeNotificationPreferences",
            "required": true,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetGroupMembership"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupMembershipMetadataResponse"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          }
        },
        "summary": "Gets group membership information in the context of the authenticated user",
        "tags": [
          "Membership"
        ]
      }
    },
    "/v1/groups/{groupId}/name": {
      "patch": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "This endpoint will charge Robux for the group rename.",
        "parameters": [
          {
            "description": "The id of the group the user is in.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The Roblox.Groups.Api.UpdateGroupNameRequest.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.UpdateGroupNameRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:UpdateGroupName"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.UpdateGroupNameResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n13: The name is invalid.\r\n19: The name is too long.\r\n20: The name has been taken."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n12: Insufficient Robux funds.\r\n14: The name is moderated.\r\n23: Insufficient permissions to complete the request.\r\n38: Your account must be verified in order to change your group's name.\r\n39: The group ownership was changed too recently."
          },
          "409": {
            "description": "36: The name was changed too recently.\r\n37: The name was in use too recently."
          },
          "413": {
            "description": "0: Unknown error."
          },
          "429": {
            "description": "17: Too many requests."
          }
        },
        "summary": "Updates the group's name.",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/groups/{groupId}/name-history": {
      "get": {
        "parameters": [
          {
            "description": "The id of the group.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "The number of results per request.",
            "enum": [
              10,
              25,
              50,
              100
            ],
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The paging cursor for the previous or next page.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "default": "Asc",
            "description": "The order the results are sorted in.",
            "enum": [
              "Asc",
              "Desc"
            ],
            "in": "query",
            "name": "sortOrder",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:GetGroupNameHistory"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.Models.Response.GroupNameHistoryResponseItem]"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "403": {
            "description": "23: Insufficient permissions to complete the request."
          }
        },
        "summary": "Gets the Group's name change history.",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/groups/{groupId}/notification-preference": {
      "patch": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The id of the group the user is in.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Roblox.Groups.Api.UpdateGroupSettingsRequest",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.UpdateGroupNotificationPreferenceRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:UpdateGroupNotificationPreference"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": " ['Unchanged' = 0, 'Created' = 1, 'Deleted' = 2, 'Updated' = 3]",
              "enum": [
                0,
                1,
                2,
                3
              ],
              "format": "int32",
              "type": "integer"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "summary": "Updates the group's settings",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/groups/{groupId}/payout-restriction": {
      "get": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Revenue:GetGroupPayoutRestriction"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupPayoutRestrictionResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "9: You don't have permission to view this group's payouts."
          }
        },
        "summary": "Gets a value indicating whether the group can use payout feature",
        "tags": [
          "Revenue"
        ]
      }
    },
    "/v1/groups/{groupId}/payouts": {
      "get": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Revenue:GetGroupPayouts"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupPayoutResponse]"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "9: You don't have permission to view this group's payouts."
          }
        },
        "summary": "Gets a list of the group payout percentages",
        "tags": [
          "Revenue"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The Roblox.Groups.Api.PayoutRequest.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.PayoutRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Revenue:MakeOneTimePayout"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n12: Insufficient Robux funds.\r\n24: Invalid payout type.\r\n25: The amount is invalid.\r\n26: Too many recipients."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n23: Insufficient permissions to complete the request.\r\n28: Group has paid out too recently. Please wait and try again.\r\n35: 2-Step Verification is required to make further transactions. Go to Settings \u003e Security to complete 2-Step Verification."
          },
          "503": {
            "description": "22: The feature is disabled."
          }
        },
        "summary": "Pays out a user in Robux.",
        "tags": [
          "Revenue"
        ]
      }
    },
    "/v1/groups/{groupId}/payouts/recurring": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "This endpoint will remove any recipients not sent in the request.\r\nIf a recipient in the request is not a valid member in the group they will not be added to the recurring payouts.",
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The Roblox.Groups.Api.PayoutRequest.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.PayoutRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Revenue:UpdateRecurringPayouts"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n24: Invalid payout type.\r\n25: The amount is invalid.\r\n26: Too many recipients.\r\n27: The recipients are invalid."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n12: Insufficient Robux funds.\r\n28: Group has paid out too recently. Please wait and try again.\r\n35: 2-Step Verification is required to make further transactions. Go to Settings \u003e Security to complete 2-Step Verification."
          },
          "503": {
            "description": "22: The feature is disabled."
          }
        },
        "summary": "Updates recurring payouts.",
        "tags": [
          "Revenue"
        ]
      }
    },
    "/v1/groups/{groupId}/relationships/{groupRelationshipType}": {
      "get": {
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The group relationship type, enemies or allies.",
            "in": "path",
            "name": "groupRelationshipType",
            "required": true,
            "type": "string"
          },
          {
            "description": "The start index of the page request",
            "format": "int32",
            "in": "query",
            "name": "StartRowIndex",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The maximum number of rows for the page request, should be at least 1.",
            "format": "int32",
            "in": "query",
            "name": "MaxRows",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:GetRelatedGroups"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupRelationshipsResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n4: Group relationship type or request type is invalid.\r\n8: Invalid or missing pagination parameters"
          }
        },
        "summary": "Gets a group's relationships",
        "tags": [
          "Relationships"
        ]
      }
    },
    "/v1/groups/{groupId}/relationships/{groupRelationshipType}/requests": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The type of group relationship being made",
            "in": "path",
            "name": "groupRelationshipType",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Roblox.Groups.Api.RelationshipsRequest.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.RelationshipsRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:DeclineBatchAffiliateRequests"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "summary": "Batch declines group affiliate requests",
        "tags": [
          "Relationships"
        ]
      },
      "get": {
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The group relationship type of the request, only allies are supported.",
            "in": "path",
            "name": "groupRelationshipType",
            "required": true,
            "type": "string"
          },
          {
            "description": "The start index of the page request",
            "format": "int32",
            "in": "query",
            "name": "StartRowIndex",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The maximum number of rows for the page request, should be at least 1.",
            "format": "int32",
            "in": "query",
            "name": "MaxRows",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:GetGroupRelationshipRequests"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupRelationshipsResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n4: Group relationship type or request type is invalid.\r\n8: Invalid or missing pagination parameters"
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "5: You don't have permission to manage this group's relationships."
          }
        },
        "summary": "Gets a group's relationship requests",
        "tags": [
          "Relationships"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The type of group relationship being made",
            "in": "path",
            "name": "groupRelationshipType",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Roblox.Groups.Api.RelationshipsRequest.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.RelationshipsRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:AcceptBatchAffiliateRequests"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "summary": "Batch accepts group affiliate requests",
        "tags": [
          "Relationships"
        ]
      }
    },
    "/v1/groups/{groupId}/relationships/{groupRelationshipType}/requests/{relatedGroupId}": {
      "delete": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The group relationship type, enemies or allies.",
            "in": "path",
            "name": "groupRelationshipType",
            "required": true,
            "type": "string"
          },
          {
            "description": "The id of the group you want to accept the relationship request with.",
            "format": "int64",
            "in": "path",
            "name": "relatedGroupId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:DeclineRelationshipRequest"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group relationship type or request type is invalid.\r\n2: Invalid group.\r\n3: Target group is invalid or does not exist.\r\n10: Relationship request does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: Insufficient permissions."
          }
        },
        "summary": "Declines a group relationship request.",
        "tags": [
          "Relationships"
        ]
      },
      "post": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The group relationship type, enemies or allies, only allies are supported.",
            "in": "path",
            "name": "groupRelationshipType",
            "required": true,
            "type": "string"
          },
          {
            "description": "The id of the group you want to accept the relationship request with.",
            "format": "int64",
            "in": "path",
            "name": "relatedGroupId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:AcceptRelationshipRequest"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group relationship type or request type is invalid.\r\n2: Invalid group.\r\n3: Target group is invalid or does not exist.\r\n10: Relationship request does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: Insufficient permissions."
          }
        },
        "summary": "Accepts a group relationship request.",
        "tags": [
          "Relationships"
        ]
      }
    },
    "/v1/groups/{groupId}/relationships/{groupRelationshipType}/{relatedGroupId}": {
      "delete": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The group relationship type, enemies or allies.",
            "in": "path",
            "name": "groupRelationshipType",
            "required": true,
            "type": "string"
          },
          {
            "description": "The id of the group you want to delete the relationship with.",
            "format": "int64",
            "in": "path",
            "name": "relatedGroupId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:DeleteGroupRelationship"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "2: Invalid group.\r\n3: Target group is invalid or does not exist.\r\n11: Relationship does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n8: You are blocked from communicating with this user."
          }
        },
        "summary": "Deletes a group relationship.",
        "tags": [
          "Relationships"
        ]
      },
      "post": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The group relationship type, enemies or allies.",
            "in": "path",
            "name": "groupRelationshipType",
            "required": true,
            "type": "string"
          },
          {
            "description": "The id of the group you want to create a relationship with.",
            "format": "int64",
            "in": "path",
            "name": "relatedGroupId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Relationships:CreateGroupRelationship"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group relationship type or request type is invalid.\r\n2: Invalid group.\r\n3: Target group is invalid or does not exist.\r\n4: Your group cannot establish a relationship with itself."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n5: Your group does not allow enemy declarations.\r\n6: Other group does not allow enemy declarations.\r\n7: Your group already has a relationship with the target group.\r\n8: You are blocked from communicating with this user.\r\n9: Insufficient permissions."
          }
        },
        "summary": "Create a group relationship.",
        "tags": [
          "Relationships"
        ]
      }
    },
    "/v1/groups/{groupId}/roles": {
      "get": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetRolesInGroup"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupAllRolesResponse"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          }
        },
        "summary": "Gets a list of the rolesets in a group.",
        "tags": [
          "Membership"
        ]
      }
    },
    "/v1/groups/{groupId}/roles/guest/permissions": {
      "get": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Permissions:GetPermissionsForGroupGuestRole"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupPermissionsResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          }
        },
        "summary": "Gets the permissions for a group's guest roleset. These can be viewed by all (members and guests) users.",
        "tags": [
          "Permissions"
        ]
      }
    },
    "/v1/groups/{groupId}/roles/permissions": {
      "get": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Permissions:GetPermissionsForAllRoles"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupPermissionsResponse]"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "summary": "Gets all permissions for each role",
        "tags": [
          "Permissions"
        ]
      }
    },
    "/v1/groups/{groupId}/roles/{roleSetId}/permissions": {
      "get": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The group's role set id.",
            "format": "int32",
            "in": "path",
            "name": "roleSetId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Permissions:GetPermissionsForGroupRole"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupPermissionsResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n2: The roleset is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "3: You are not authorized to view/edit permissions for this role."
          }
        },
        "summary": "Gets the permissions for a group's roleset. The authorized user must either be the group owner or the roleset being requested, except for guest roles, which can be viewed by all (members and guests).",
        "tags": [
          "Permissions"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The group's id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The roleset's id.",
            "format": "int32",
            "in": "path",
            "name": "roleSetId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The request.",
            "in": "body",
            "name": "updatePermissionsRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.UpdatePermissionsRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Permissions:UpdatePermissionsForGroupRole"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n2: The roleset is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n3: You are not authorized to view/edit permissions for this role.\r\n4: This role's permissions can not be modified."
          }
        },
        "summary": "Updates the permissions for a group's roleset. The authorized user must be the group owner.",
        "tags": [
          "Permissions"
        ]
      }
    },
    "/v1/groups/{groupId}/roles/{roleSetId}/users": {
      "get": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The group's role set id.",
            "format": "int32",
            "in": "path",
            "name": "roleSetId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "The number of results per request.",
            "enum": [
              10,
              25,
              50,
              100
            ],
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The paging cursor for the previous or next page.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "default": "Asc",
            "description": "The order the results are sorted in.",
            "enum": [
              "Asc",
              "Desc"
            ],
            "in": "query",
            "name": "sortOrder",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetGroupMembersInRole"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.Models.Response.UserModel]"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "403": {
            "description": "2: The roleset is invalid or does not exist."
          }
        },
        "summary": "Gets a list of users in a group for a specific roleset.",
        "tags": [
          "Membership"
        ]
      }
    },
    "/v1/groups/{groupId}/rolesets/create": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The Roblox.Groups.Api.Models.Request.CreateRoleSetRequest.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.Models.Request.CreateRoleSetRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "RoleSets:CreateRoleset"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupRoleResponse"
            }
          },
          "400": {
            "description": "0: Something went wrong.\r\n3: You do not have enough funds to purchase this role.\r\n5: Role name already exists.\r\n6: Rank value is out of bounds.\r\n7: The role name is too long.\r\n8: The role description is too long.\r\n10: This group does not exist.\r\n11: Failed to process payment to purchase role.\r\n12: Limit for roles have been reached on this group.\r\n14: Role name can not be empty.\r\n15: This role does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: You do not have permissions to perform this action."
          }
        },
        "summary": "Creates new group roleset.",
        "tags": [
          "RoleSets"
        ]
      }
    },
    "/v1/groups/{groupId}/rolesets/{rolesetId}": {
      "delete": {
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The roleset Id.",
            "format": "int64",
            "in": "path",
            "name": "rolesetId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "RoleSets:DeleteRoleset"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "10: This group does not exist.\r\n15: This role does not exist.\r\n17: Cannot remove any more roles\r\n18: Cannot delete this role."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: You do not have permissions to perform this action.\r\n16: There are users in this role."
          }
        },
        "summary": "Deletes existing group roleset.",
        "tags": [
          "RoleSets"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The roleset Id.",
            "format": "int64",
            "in": "path",
            "name": "rolesetId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The Roblox.Groups.Api.Models.Request.UpdateRoleSetRequest.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.Models.Request.UpdateRoleSetRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "RoleSets:UpdateRoleset"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupRoleResponse"
            }
          },
          "400": {
            "description": "5: Role name already exists.\r\n6: Rank value is out of bounds.\r\n7: The role name is too long.\r\n8: The role description is too long.\r\n10: This group does not exist.\r\n14: Role name can not be empty.\r\n15: This role does not exist.\r\n19: Cannot update Guest role.\r\n20: Cannot update Owner role rank."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n9: You do not have permissions to perform this action."
          }
        },
        "summary": "Updates existing group roleset.",
        "tags": [
          "RoleSets"
        ]
      }
    },
    "/v1/groups/{groupId}/settings": {
      "get": {
        "parameters": [
          {
            "description": "The id of the group the user is in.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:GetGroupSettings"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupSettingsResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "23: Insufficient permissions to complete the request."
          }
        },
        "summary": "Gets the Group's settings",
        "tags": [
          "Groups"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The id of the group the user is in.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Roblox.Groups.Api.UpdateGroupSettingsRequest",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.UpdateGroupSettingsRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:UpdateGroupSettings"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n23: Insufficient permissions to complete the request."
          },
          "503": {
            "description": "31: Service is currently unavailable."
          }
        },
        "summary": "Updates the group's settings",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/groups/{groupId}/social-links": {
      "get": {
        "parameters": [
          {
            "description": "The Id of the game",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "SocialLinks:GetSocialLinks"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.SocialLinkResponse]"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "13: Only users who are over thirteen years of age may edit social links."
          },
          "404": {
            "description": "11: Social links cannot be processed as this time."
          }
        },
        "summary": "Get social link data associated with a group",
        "tags": [
          "SocialLinks"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The id of the game",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The Roblox.Groups.Api.SocialLinkRequest",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.SocialLinkRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "SocialLinks:PostSocialLink"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.SocialLinkResponse"
            }
          },
          "400": {
            "description": "3: The social link title is too long.\r\n4: The social link title cannot be empty.\r\n5: The social link url cannot be empty.\r\n7: The request was null.\r\n9: The social link type is invalid.\r\n12: The social link title was moderated."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to configure this social link."
          },
          "404": {
            "description": "8: The requested group or social link was not found."
          },
          "503": {
            "description": "11: Social links cannot be processed as this time."
          }
        },
        "summary": "Posts a social links",
        "tags": [
          "SocialLinks"
        ]
      }
    },
    "/v1/groups/{groupId}/social-links/{socialLinkId}": {
      "delete": {
        "parameters": [
          {
            "description": "The id of the game you are editting, required for permissions checking",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The id of the social link",
            "format": "int64",
            "in": "path",
            "name": "socialLinkId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "SocialLinks:DeleteSocialLink"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n10: The social link is not for a group.\r\n15: The social link id doesn't match the group id."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to configure this social link.\r\n13: Only users who are over thirteen years of age may edit social links."
          },
          "404": {
            "description": "11: Social links cannot be processed as this time."
          }
        },
        "summary": "Deletes a social link",
        "tags": [
          "SocialLinks"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The id of the universe",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The id of the social link being updated",
            "format": "int64",
            "in": "path",
            "name": "socialLinkId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The Roblox.Groups.Api.SocialLinkRequest.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.SocialLinkRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "SocialLinks:UpdateSocialLink"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n3: The social link title is too long.\r\n4: The social link title cannot be empty.\r\n5: The social link url cannot be empty.\r\n6: The social link url was improperly formatted.\r\n7: The request was null.\r\n8: The requested group or social link was not found.\r\n9: The social link type is invalid.\r\n10: The social link is not for a group.\r\n12: The social link title was moderated.\r\n16: A social link with this type already exists on this group."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to configure this social link."
          },
          "404": {
            "description": "11: Social links cannot be processed as this time."
          },
          "503": {
            "description": "11: Social links cannot be processed as this time."
          }
        },
        "summary": "Updates a social link",
        "tags": [
          "SocialLinks"
        ]
      }
    },
    "/v1/groups/{groupId}/status": {
      "patch": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The Roblox.Groups.Api.PostGroupStatusRequest.",
            "in": "body",
            "name": "statusRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.PostGroupStatusRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Groups:SetGroupStatus"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.ShoutResponse"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist.\r\n7: Missing group status content."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are not authorized to set the status of this group"
          }
        },
        "summary": "Sets group status",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/groups/{groupId}/users": {
      "get": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "The number of results per request.",
            "enum": [
              10,
              25,
              50,
              100
            ],
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The paging cursor for the previous or next page.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "default": "Asc",
            "description": "The order the results are sorted in.",
            "enum": [
              "Asc",
              "Desc"
            ],
            "in": "query",
            "name": "sortOrder",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetGroupMembers"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.UserGroupRoleResponse]"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          }
        },
        "summary": "Gets a list of users in a group.",
        "tags": [
          "Membership"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Only supplied when captcha has been solved.",
            "in": "body",
            "name": "joinGroupModel",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.JoinGroupRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:JoinGroup"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n6: You are already in the maximum number of groups.\r\n9: You do not have the builders club membership necessary to join this group.\r\n14: You cannot join a closed group."
          },
          "409": {
            "description": "7: You have already requested to join this group.\r\n8: You are already a member of this group."
          },
          "429": {
            "description": "10: Too many attempts to join the group. Please try again later."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "summary": "Joins a group",
        "tags": [
          "Membership"
        ]
      }
    },
    "/v1/groups/{groupId}/users/{userId}": {
      "delete": {
        "parameters": [
          {
            "description": "The group Id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The Id of the user being removed.",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:RemoveGroupMember"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The user is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n4: You do not have permission to manage this member.\r\n25: 2-Step Verification is required to make further transactions. Go to Settings \u003e Security to complete 2-Step Verification."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "summary": "Removes a user from a group",
        "tags": [
          "Membership"
        ]
      },
      "patch": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The id of the group the user is in.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The id of the user being updated.",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The Roblox.Groups.Api.UpdateUserRoleRequest.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.UpdateUserRoleRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:UpdateUserGroupRole"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n2: The roleset is invalid or does not exist.\r\n3: The user is invalid or does not exist.\r\n23: You cannot change your own role.\r\n26: You cannot change the user's role to the same role."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n4: You do not have permission to manage this member."
          },
          "503": {
            "description": "18: The operation is temporarily unavailable. Please try again later."
          }
        },
        "summary": "Updates a users role in a group.",
        "tags": [
          "Membership"
        ]
      }
    },
    "/v1/groups/{groupId}/wall/posts": {
      "get": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 10,
            "description": "The number of results per request.",
            "enum": [
              10,
              25,
              50,
              100
            ],
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "description": "The paging cursor for the previous or next page.",
            "in": "query",
            "name": "cursor",
            "type": "string"
          },
          {
            "default": "Asc",
            "description": "Sorted by group wall post Id",
            "enum": [
              "Asc",
              "Desc"
            ],
            "in": "query",
            "name": "sortOrder",
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Wall:GetGroupWallPosts"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Groups.Api.Models.Response.GroupWallPostModel]"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "403": {
            "description": "2: You do not have permission to access this group wall."
          }
        },
        "summary": "Gets a list of group wall posts.",
        "tags": [
          "Wall"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The Roblox.Groups.Api.CreateWallPostRequest.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.CreateWallPostRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Wall:CreateGroupWallPosts"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.Models.Response.GroupWallPostModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n5: Your post was empty, white space, or more than 500 characters."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to access this group wall."
          },
          "429": {
            "description": "4: You are posting too fast, please try again in a few minutes."
          }
        },
        "summary": "Creates a post on a group wall",
        "tags": [
          "Wall"
        ]
      }
    },
    "/v1/groups/{groupId}/wall/posts/{postId}": {
      "delete": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The group wall post id.",
            "format": "int64",
            "in": "path",
            "name": "postId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Wall:DeleteWallPost"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n3: The group wall post id is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to access this group wall."
          }
        },
        "summary": "Deletes a group wall post.",
        "tags": [
          "Wall"
        ]
      }
    },
    "/v1/groups/{groupId}/wall/subscribe": {
      "post": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          }
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Wall:Subscribe"
          ]
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "1: The group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to access this group wall."
          }
        },
        "summary": "Subscribes the authenticated user to notifications of group wall events.",
        "tags": [
          "Wall"
        ]
      }
    },
    "/v1/groups/{groupId}/wall/users/{userId}/posts": {
      "delete": {
        "parameters": [
          {
            "description": "The group id.",
            "format": "int64",
            "in": "path",
            "name": "groupId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The user id.",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Wall:DeleteAllPostsByUser"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: The group is invalid or does not exist.\r\n6: The user specified is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You do not have permission to access this group wall."
          }
        },
        "summary": "Deletes all group wall posts made by a specific user.",
        "tags": [
          "Wall"
        ]
      }
    },
    "/v1/roles": {
      "get": {
        "parameters": [
          {
            "collectionFormat": "csv",
            "description": "A list of role ids",
            "in": "query",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "name": "ids",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Roles:GetGroupRoleSets"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupRoleDetailResponse]"
            }
          },
          "400": {
            "description": "1: Ids could not be parsed from request.\r\n2: Too many ids in request."
          }
        },
        "summary": "Gets the Roles by their ids.",
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/user/groups/pending": {
      "get": {
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetPendingGroupJoins"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupDetailResponse]"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "summary": "Gets groups that the authenticated user has requested to join",
        "tags": [
          "Membership"
        ]
      }
    },
    "/v1/user/groups/primary": {
      "delete": {
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "PrimaryGroup:ClearPrimaryGroup"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "summary": "Removes the authenticated user's primary group",
        "tags": [
          "PrimaryGroup"
        ]
      },
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "description": "The request body containing the group id.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.PrimaryGroupRequest"
            }
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "PrimaryGroup:SetPrimaryGroup"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "1: Group is invalid or does not exist."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed\r\n2: You aren't a member of the group specified."
          }
        },
        "summary": "Sets the authenticated user's primary group",
        "tags": [
          "PrimaryGroup"
        ]
      }
    },
    "/v1/users/{userId}/friends/groups/roles": {
      "get": {
        "parameters": [
          {
            "description": "The user id.",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetFriendGroupMemberships"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.UserGroupMembershipResponse]"
            }
          },
          "400": {
            "description": "3: The user is invalid or does not exist."
          },
          "403": {
            "description": "3: The user is invalid or does not exist."
          }
        },
        "summary": "Gets a list of all groups the specified users' friends are in.",
        "tags": [
          "Membership"
        ]
      }
    },
    "/v1/users/{userId}/groups/primary/role": {
      "get": {
        "parameters": [
          {
            "description": "The user id.",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "PrimaryGroup:GetPrimaryGroup"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Groups.Api.GroupMembershipDetailResponse"
            }
          },
          "400": {
            "description": "4: User is invalid or does not exist."
          }
        },
        "summary": "Gets a user's primary group.",
        "tags": [
          "PrimaryGroup"
        ]
      }
    },
    "/v1/users/{userId}/groups/roles": {
      "get": {
        "parameters": [
          {
            "description": "The user id.",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "includeLocked",
            "required": true,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "includeNotificationPreferences",
            "required": true,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "properties": {
          "internal": false,
          "metricIds": [
            "Membership:GetGroupMemberships"
          ]
        },
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiArrayResponse[Roblox.Groups.Api.GroupMembershipDetailResponse]"
            }
          },
          "400": {
            "description": "3: The user is invalid or does not exist."
          }
        },
        "summary": "Gets a list of all group roles for groups the specified user is in.",
        "tags": [
          "Membership"
        ]
      }
    }
  },
  "schemes": [
    "https"
  ],
  "swagger": "2.0"
}